{"version":3,"sources":["pages/Main/index.js","api/index.js","components/Card/index.js","serviceWorker.js","index.js"],"names":["Main","props","callApi","a","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lng","longitude","Http","get","response","console","log","setState","stores","data","count","stroesList","state","map","i","key","addr","storeName","name","total","stock_cnt","remain","remain_cnt","soldOut","sold_out","this","Component","hot","module","axios","create","baseURL","Card","className","styles","card_wrap","address","store_name","stock_count","remain_count","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gPAKMA,E,YAEF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAWVC,QAZmB,sBAYT,sBAAAC,EAAA,sDACNC,UAAUC,YAAYC,mBAAtB,uCAA0C,WAAOC,GAAP,mBAAAJ,EAAA,6DAChCK,EAAMD,EAAIE,OAAOC,SACjBC,EAAMJ,EAAIE,OAAOG,UAFe,SAGfC,IAAKC,IAAL,gCAAkCN,EAAlC,gBAA6CG,EAA7C,YAHe,cAGhCI,EAHgC,OAItCC,QAAQC,IAAIF,GAJ0B,SAKhC,EAAKG,SAAS,CAChBC,OAAQJ,EAASK,KAAKD,OACtBE,MAAON,EAASK,KAAKC,QAPa,2CAA1C,uDADM,2CAZS,EAyBnBC,WAAa,WAAO,IACRH,EAAW,EAAKI,MAAhBJ,OACR,OAAOA,GAAUA,EAAOK,KAAI,SAACJ,EAAMK,GAC/B,OACI,kBAAC,IAAD,CACIC,IAAKD,EACLE,KAAMP,EAAKO,KACXC,UAAWR,EAAKS,KAChBC,MAAOV,EAAKW,UACZC,OAAQZ,EAAKa,WACbC,QAASd,EAAKe,eAjC1B,EAAKZ,MAAQ,CACTJ,OAAQ,KACRE,MAAO,MAJI,E,iFASfe,KAAKlC,Y,+BAiCL,OACI,6BACKkC,KAAKd,kB,GA9CHe,aAoDJC,kBAAIC,EAAJD,CAAYtC,K,qDCzD3B,qBAEewC,QAAMC,OAAO,CACxBC,QAAS,2D,yICAQC,E,YACjB,WAAY1C,GAAQ,IAAD,8BACf,4CAAMA,KACDsB,MAAM,GAFI,E,sEAIT,IAAD,EAC+Ca,KAAKnC,MAAjD0B,EADH,EACGA,KAAMC,EADT,EACSA,UAAWE,EADpB,EACoBA,MAAOE,EAD3B,EAC2BA,OAAQE,EADnC,EACmCA,QAExC,OADAlB,QAAQC,IAAImB,KAAKnC,OAEb,yBAAK2C,UAAWC,IAAOC,WACnB,yBAAKF,UAAWC,IAAOE,SAClBpB,GAEL,yBAAKiB,UAAWC,IAAOG,YAClBpB,GAEL,yBAAKgB,UAAWC,IAAOI,aAClBnB,GAEL,yBAAKc,UAAWC,IAAOK,cAClBlB,GAEL,2BAAIE,Q,GAtBcG,c,wHCSdc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAACzD,EAAA,EAAD,MAAU0D,SAASC,eAAe,SD8H5C,kBAAmBvD,WACrBA,UAAUwD,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.b3f3c988.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { hot } from 'react-hot-loader'\nimport Http from '../../api';\nimport Card from '../../components/Card';\n\nclass Main extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            stores: null,\n            count: null,\n        }\n    }\n\n    componentDidMount() {\n        this.callApi()\n    }\n\n    callApi = async () => {\n        navigator.geolocation.getCurrentPosition( async (pos) => {\n            const lat = pos.coords.latitude;\n            const lng = pos.coords.longitude;\n            const response = await Http.get(`/storesByGeo/json?lat=${lat}&lng=${lng}&m=1000`)\n            console.log(response)\n            await this.setState({\n                stores: response.data.stores,\n                count: response.data.count,\n            })\n        });\n    }\n\n    stroesList = () => {\n        const { stores } = this.state;\n        return stores && stores.map((data, i) => {\n            return (\n                <Card \n                    key={i}\n                    addr={data.addr}\n                    storeName={data.name}\n                    total={data.stock_cnt}\n                    remain={data.remain_cnt}\n                    soldOut={data.sold_out}\n                />\n            )\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {this.stroesList()}\n            </div>\n        )\n    }\n}\n\nexport default hot(module)(Main);","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://8oi9s0nnth.apigw.ntruss.com/corona19-masks/v1',\n    // header: {\n    //     Authorization: 'bearer accessKey'\n    // }\n});","import React, { Component } from 'react'\nimport styles from './Card.scss';\n\nexport default class Card extends Component {\n    constructor(props) {\n        super(props);\n        this.state={}\n    }\n    render() {\n        const { addr, storeName, total, remain, soldOut } = this.props;\n        console.log(this.props)\n        return (\n            <div className={styles.card_wrap}>\n                <div className={styles.address}>\n                    {addr}\n                </div>\n                <div className={styles.store_name}>\n                    {storeName}\n                </div>\n                <div className={styles.stock_count}>\n                    {total}\n                </div>\n                <div className={styles.remain_count}>\n                    {remain}\n                </div>\n                <p>{soldOut}</p>\n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './pages/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}